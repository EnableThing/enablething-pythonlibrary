import requests, json
import json
import random
import time
import uuid
from datetime import datetime



class APIInterface(object):
    def __init__(self, url, unit_id):
        # url : "http://<ip address>:<port>"
        # unit_id = "aadf..."
        
        self.url = url
        self.unit_id = unit_id
        self.response = None


    def create_random_task(self):
        dt= datetime.now()
        t1 = dt.strftime('%Y-%m-%dT%H:%M:%S')
        # Create a task but without task_id because the post module generates that
        # automatically.
        x = json.dumps({          
        "title": "empty",
        "board": "Backlog", 
        "chronicle":{},
        "from_unit": uuid.uuid4().hex , 
        "to_unit": uuid.uuid4().hex , 
        "command": {
            "announce": "blank"
            }, 
        "response": {
            "blank": "blank"
            }
        })
                    
        return json.loads(x)

    def get_task(self, task_id):
        #t = task_id.replace("-", "")
    
        #getURL = "http://127.0.0.1:8000/api/tasks/task_id/"+t
        url = self.url + "/unit/" + self.unit_id + "/task/" +task_id
        print "url",url
    
        r = requests.get(url = url,
                         data={},
                         headers={"Accept": "application/json"},
                         cookies=None,
                         auth=None)
        r.raise_for_status()
        return json.loads(r.content)

    def task_command(self, task):
        # Take a new command and add it to the noticeboard
        
        # Take a dict task
        url = self.url + "/unit/" + self.unit_id
        # Task_id is authomatically generated by task board
        # Remove it
#         postData = json.dumps({
#         "title": task['title'], 
#         "board": task['board'], 
#         "chronicle": task['chronicle'], 
#         "from_unit": task['from_unit'], 
#         "to_unit": task['to_unit'], 
#         "command": task['command'], 
#         "response": task['response']
#         })
#         
        data = json.dumps(task.json())      
    
        print "url",url
        print "data",data
        print "type data", type(data)

        response = requests.post(url = url,
                         data = data,
                         headers = {"Content-Type": "application/json"},
                         cookies = None,
                         auth = None)
        
        
        response.raise_for_status()
        
        print "response.content", response.content
    
        self.response = response
    
        return json.loads(response.content)
    
    def task_response(self, task):
        # Take a response and update an existing task
    
        
#       postURL = "http://127.0.0.1:8000/api/tasks/task_id/" + task_id
        #url = self.url + "/unit/" + self.unit_id + "/task/" + task.task_id
        url = self.url + "/unit/" + self.unit_id
 
        #Data = json.dumps(json_package)
    
        data = json.dumps(task.json())
        print "url", url
        print "data",data
    
    
        response = requests.post(url = url,
                         data = data,
                         headers ={"Content-Type": "application/json"},
                         cookies = None,
                         auth = None)
    
        response.raise_for_status()
        
        return json.loads(response.content)
    
    def get_new_tasks(self, unit_id):

        #u = unit_id.replace("-", "")
        url = self.url + "/unit/" + self.unit_id + "/tasks?board=Backlog"
        print "url",url
        
        #getURL = "http://127.0.0.1:8000/api/tasks/to_unit/"+ u + "/?board=Backlog"
       
        response = requests.get(url = url,
                         data={},
                         headers={"Accept": "application/json"},
                         cookies=None,
                         auth=None)
        response.raise_for_status()
    
        return json.loads(response.content)

if __name__ == "__main__":
    pass
